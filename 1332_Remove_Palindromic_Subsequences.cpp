#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define fo(a,b) for(int i = a;i < b;i++)
#define Fo(a,b) for(int i = a;i >= b;i--)
#define YES cout << "YES" << endl
#define NO cout << "NO" << endl

class Solution {
public:
    int removePalindromeSub(string s) {
        string rev = s;
        reverse(rev.begin(), rev.end());
        if(rev == s) return 1;
        return 2;
    }
};

int main() {
    Solution sol;
    string s1 = "ababa";
    string s2 = "abb";
    string s3 = "baabb";
    cout << sol.removePalindromeSub(s1) << endl;
    cout << sol.removePalindromeSub(s2) << endl;
    cout << sol.removePalindromeSub(s3) << endl;
    return 0;
}



//You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
// Return the minimum number of steps to make the given string empty.
// A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
// A string is called palindrome if is one that reads the same backward as well as forward.
//
//
// Example 1:
// Input: s = "ababa"
// Output: 1
// Explanation: s is already a palindrome, so its entirety can be removed in a single step.

// Example 2:
// Input: s = "abb"
// Output: 2
// Explanation: "abb" -> "bb" -> "".
// Remove palindromic subsequence "a" then "bb".

// Example 3:
// Input: s = "baabb"
// Output: 2
// Explanation: "baabb" -> "b" -> "".
// Remove palindromic subsequence "baab" then "b".
//
// Constraints:
// 1 <= s.length <= 1000
// s[i] is either 'a' or 'b'.